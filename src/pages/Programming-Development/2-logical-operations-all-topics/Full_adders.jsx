import React from "react";

function Full_adders() {
  return (
    <div id="jsn-maincontent" class="span9 order1 row-fluid">
      <div id="jsn-maincontent_inner">
        <div id="jsn-centercol">
          <div id="jsn-centercol_inner">
            <div id="jsn-mainbody-content" class="jsn-hasmainbody">
              <div id="jsn-mainbody-content-inner1">
                <div id="jsn-mainbody-content-inner2">
                  <div id="jsn-mainbody-content-inner3">
                    <div id="jsn-mainbody-content-inner4" class="row-fluid">
                      <div
                        id="jsn-mainbody-content-inner"
                        class="span12 order1"
                      >
                        <div id="jsn-mainbody">
                          <div id="system-message-container"></div>

                          <div
                            class="item-page"
                            itemscope
                            itemtype="https://schema.org/Article"
                          >
                            <meta itemprop="inLanguage" content="en-GB" />

                            <div itemprop="articleBody">
                              <p></p>
                              <h1 style="text-align: center">Full adders</h1>
                              <p class="NormalContent">
                                <strong>
                                  <strong>
                                    Introduction
                                    <br />
                                  </strong>
                                </strong>
                                If you haven't yet worked through and understood
                                how a half adder works, then you should go back
                                and work through our half adder notes before
                                starting on this section. A half adder is used
                                to add two bits together. A full adder is used
                                to add three bits together. One of the commonest
                                ways of implementing the full adder is to use
                                two half adders joined together with an OR gate.
                                That is one reason why you need to understand
                                how a half adder works before starting on
                                understanding a full adder!
                              </p>

                              <p class="NormalContent">
                                <img
                                  style="margin: 20px; float: left"
                                  src="images/35388731-207c-4307-97ab-18b3b14f0973sum4.GIF"
                                  alt="sum4"
                                />
                                &nbsp;A full adder has 3 bits as an input, which
                                we will call A, B and C<sub>in</sub>.
                              </p>
                              <p class="NormalContent">
                                C<sub>in</sub> is a bit but it is actually the
                                carry from the previous column's addition. If
                                you remember when we looked at the half adder
                                and we were adding 2 bits, we always generated a
                                carry from the previous column's addition. For
                                example, let's call the right hand column
                                'column k'. We added just 2 bits on this
                                occasion (the 0 and a 1) as that was the first
                                addition. The sum was 1 but we carried a 0 into
                                the next column. We then had to add 1 + 1, along
                                with adding the previous column's carry, the 0.
                                The previous column is column k - 1. &nbsp;Each
                                time we did an addition, we had to also add a
                                carry from column k - 1, and we also generated a
                                carry, which had to be added in to the next
                                column.
                              </p>
                              <p class="NormalContent">
                                Apart from our 3 input bits, we also have the
                                output. As before, this will be a sum (S) and a
                                carry (C<sub>out</sub>). C<sub>out</sub> is
                                short for carry out, which is just the value of
                                the carry generated by adding the bits.
                              </p>
                              <p>
                                &nbsp;Looking at the different permutations of
                                ones and zeros when you have 3 bits, we can
                                produce the truth table for a full adder:
                              </p>
                              <p>
                                <img
                                  style="margin: 10px; vertical-align: middle"
                                  src="images/78892420-3598-464a-96e9-87be03411423fulladdertruth.GIF"
                                  alt="fulladdertruth"
                                />
                              </p>
                              <p class="NormalContent">
                                <span style="line-height: 1.5">
                                  In the first column, we have 0 + 0 + 0, which
                                  totals 0. That's 0 for the sum and 0 for the
                                  carry.
                                  <br />
                                </span>
                                In the second column, we have 0 + 0 + 1,
                                &nbsp;which totals 1. That's 1 for the sum and 0
                                for the carry.
                                <br />
                                In the third column, we have 0 + 1 + 0,
                                &nbsp;which totals 1. That's 1 for the sum and 0
                                for the carry.
                                <br />
                                In the fourth column, we have 0 + 1 + 1,
                                &nbsp;which totals 2, which in binary is 10.
                                That's 0 for the sum and 1 for the carry.
                                <br />
                                In the fifth column, we have 1 + 0 + 0,
                                &nbsp;which totals 1. That's 1 for the sum and 0
                                for the carry.
                                <br />
                                In the sixth column, we have 1 + 0 + 1,
                                &nbsp;which totals 2, which in binary is 10.
                                That's 0 for the sum and 1 for the carry.
                                <br />
                                In the seventh column, we have 1 + 1 + 0,
                                &nbsp;which totals 2, which in binary is 10.
                                That's 0 for the sum and 1 for the carry.
                                <br />
                                In the eighth column, we have 1 + 1 + 1,
                                &nbsp;which totals 3.&nbsp;which in binary is
                                11. That's 1 for the sum and 1 for the carry.
                                <br />
                                <span style="line-height: 1.5">
                                  Now we understand the logic behind a full
                                  adder, we can design a diagram using logic
                                  gates to implement it.
                                </span>
                              </p>
                              <p class="NormalContent">
                                <span style="line-height: 1.5">
                                  There are many different ways you can put
                                  logic gates together to achieve the truth
                                  table for a full adder. If we rearrange the
                                  order of the truth table for a moment (without
                                  changing any values in any of the cells), we
                                  can see an easy implementation.&nbsp;
                                </span>
                              </p>
                              <p class="NormalContent">
                                <img
                                  style="margin: 10px; vertical-align: middle"
                                  src="images/7585b055-c57e-4abd-89f3-8be3aec58bd2fulladder2.GIF"
                                  alt="fulladder2"
                                />
                                <span style="line-height: 1.5">&nbsp;</span>
                              </p>
                              <p class="NormalContent">
                                <span style="line-height: 1.5">
                                  If you look at the top four rows, the C
                                  <sub>in</sub>&nbsp;is always a 0, but the sum
                                  is now behaving like an XOR with respect to A
                                  and B.
                                  <br />
                                  If you look at the bottom four rows, the C
                                  <sub>in</sub>&nbsp;is always a 1, but the sum
                                  is now an XNOR (and inverted XOR) with respect
                                  to A and B.
                                  <br />
                                  If you look at the top for rows, the C
                                  <sub>in</sub> is always a 0, but the carry is
                                  behaving like an AND gate with resepct to A
                                  and B.
                                  <br />
                                  If you look at the bottom four rows, the C
                                  <sub>in</sub> is a 1, but the carry is
                                  behaving like an OR gate with respect to A and
                                  B.
                                  <br />
                                </span>
                              </p>
                              <p
                                class="NormalContent"
                                style="margin-bottom: 10px"
                              >
                                <span style="line-height: 1.5">
                                  Putting these facts together, we can design a
                                  full adder logic gate circuit.
                                </span>
                              </p>
                              <p
                                class="NormalContent"
                                style="margin-bottom: 10px"
                              >
                                <span style="line-height: 1.5">
                                  <img
                                    style="margin: 20px; vertical-align: middle"
                                    src="images/77d9b37b-5077-4fa0-9312-c13090b7c73afulladder1.GIF"
                                    alt="fulladder1"
                                  />
                                  <br />
                                  <span style="line-height: 1.5">
                                    Using the truth table, look at each of the
                                    eight permutations in turn and work through
                                    the circuit diagram, to check that the
                                    output for the sum and carry is what you
                                    would expect it to be.
                                  </span>
                                </span>
                              </p>
                              <p
                                class="NormalContent"
                                style="margin-bottom: 10px"
                              >
                                <span style="line-height: 1.5">
                                  <span style="line-height: 1.5">
                                    The above design is not at all the best way
                                    to implement a full adder. It's just one way
                                    that is perhaps easier to understand than
                                    other designs. Another way is simply to use
                                    two half adders and an OR gate. A simplified
                                    logic diagram is as follows:
                                  </span>
                                </span>
                              </p>
                              <p class="NormalContent">
                                <img
                                  style="margin: 10px; float: left"
                                  src="images/78cc7e3c-e969-4d44-aace-d4c9d29776a4fulladdersimplfied.GIF"
                                  alt="fulladdersimplfied"
                                />
                              </p>
                              <p class="NormalContent">&nbsp;</p>
                              <p class="NormalContent">&nbsp;</p>
                              <p class="NormalContent">&nbsp;</p>
                              <p class="NormalContent">&nbsp;</p>
                              <p class="NormalContent">&nbsp;</p>
                              <p class="NormalContent">&nbsp;</p>
                              <p class="NormalContent">&nbsp;</p>
                              <p class="NormalContent">&nbsp;</p>
                              <p class="NormalContent">
                                &nbsp;The full logic gate diagram is as follows:
                              </p>
                              <p class="NormalContent">
                                <img
                                  src="images/d975a8bb-42dc-4357-955d-7a00d2a63683fulladder.GIF"
                                  alt="fulladder"
                                />
                              </p>
                              <p></p>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default Full_adders;
